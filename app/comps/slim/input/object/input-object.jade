.card
  .card-content('[id]'=`id`)
    p.card-title(*ngIf='named') {{k}}
    //- '[ngControlGroup]'=`ctrl`
    form
    
      //- select.jade
      .input-field(
        *ngIf=`isOneOf`
      )
        //- '(input)'=`option = $event.target.value`
        select(
          '[(ngModel)]'=`option`
        )
          option(
            *ngFor=`let opt of spec.additionalProperties.oneOf; let idx = index`
            '[value]'=`idx`
          )
            | {{opt.type}}
      //- script.
      //-   $('select').material_select();
      
      ul(
        *ngIf=`!isOneOf || option`
        '[ngControlGroup]'=`spec.name`
      )
        table.bordered.highlight
        thead
          //- spec.items.properties[key].name
          th Name
          th Value
          th
        tbody
          //- id=`{{?.id}}`
          //- presumes lengths of items and the ControlArray will stay in sync
          //- ; #path_i = path.concat(item); ctrl_i = ctrl.at(i);
          tr(*ngFor="let item of items; let i = index")
            //- td(*ngFor=`let key of keys`)
            //- ("#key = 'name'")
            td
              //- '[path]'=`path_i.concat(key)`
              //- '[ctrl]'=`ctrl_i.controls[key]`
              input-field(
                '[named]'=`false`
                '[path]'=`path.concat(item).concat('name')`
                '[spec]'=`{ name: 'name', type: 'string', required: true, enum: keyEnum, suggestions: keySugg }`
                '[ctrl]'=`ctrl.at(i).controls.name`
              )
            //- ("#key = 'val'")
            td
              //- '[name]'=`i`
              //- '[spec]'=`((spec?.properties && i) ? spec?.properties[ctrl.at(i).controls.name] : null) || spec.additionalProperties`
              input-value(
                '[named]'=`false`
                '[path]'=`path.concat(item).concat('val')`
                '[spec]'=`resolveSpec(i)`
                '[ctrl]'=`ctrl.at(i).controls.val`
              )
            td
              button.btn.waves-effect.waves-light.btn-floating.red('(click)'=`remove(item)`)
                | Ã—

    ul.errors.card-panel.red-text.red.lighten-5('[hidden]'=`!ctrl.errors?.uniqueKeys`)
      | Keys must be unique.
    ul.errors.card-panel.red-text.red.lighten-5('[hidden]'=`!ctrl.errors?.allOf`)
      | Must use and provide valid values for all types.
        
    a.btn.waves-effect.waves-light.green('(click)'=`add()`)
      i.material-icons add
