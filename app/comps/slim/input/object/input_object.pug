.card
  .card-content('[id]'=`id`)
    p.card-title(*ngIf='named') {{k}}
    //- '[ngModelGroup]'=`ctrl`
    form

      //- select.pug
      .input-field(
        *ngIf=`isOneOf`
      )
        //- '(input)'=`option = $event.target.value`
        select(
          '[(ngModel)]'=`option`
          '[ngModelOptions]'=`{ standalone: true }`
        )
          option(
            *ngFor=`let opt of schema.additionalProperties.oneOf; let idx = index`
            '[value]'=`idx`
            @flyInOut=`'in'`
          )
            | {{opt.type}}
      //- script.
      //-   $('select').material_select();

      ul(
        *ngIf=`!isOneOf || option`
        '[ngModelGroup]'=`schema.name`
      )
        table.bordered.highlight
        thead
          //- schema.items.properties[key].name
          th Name
          th Value
          th
        tbody
          //- id=`{{?.id}}`
          //- presumes lengths of items and the FormArray will stay in sync
          //- ; #ctrl_i = ctrl.at(i);
          tr(
            *ngFor="let item of ctrl.indices; let i = index"
            @flyInOut=`'in'`
          )
            //- td(*ngFor=`let key of keys`)
            //- ("#key = 'name'")
            td
              //- '[ctrl]'=`ctrl_i.controls[key]`
              input-field(
                '[named]'=`false`
                '[schema]'=`{ name: 'name', type: 'string', enum: keyEnum, suggestions: keySugg }`
                '[ctrl]'=`ctrl.at(i).controls.name`
              )
            //- ("#key = 'val'")
            td
              //- '[name]'=`i`
              //- '[schema]'=`((schema?.properties && i) ? schema?.properties[ctrl.at(i).controls.name] : null) || schema.additionalProperties`
              input-value(
                '[named]'=`false`
                '[schema]'=`resolveSchema(i)`
                '[ctrl]'=`ctrl.at(i).controls.val`
              )
            td
              button.btn.waves-effect.waves-light.btn-floating.red('(click)'=`ctrl.remove(item)`)
                | Ã—

    ul.errors.card-panel.red-text.red.lighten-5('[hidden]'=`!ctrl.errors?.uniqueKeys`)
      | Keys must be unique.
    ul.errors.card-panel.red-text.red.lighten-5('[hidden]'=`!ctrl.errors?.allOf`)
      | Must use and provide valid values for all types.

    a.btn.waves-effect.waves-light.green('(click)'=`ctrl.add()`)
      i.material-icons add

    include ../errors.pug
