.card
  .card-content('[id]'=`id`)
    p.card-title(*ngIf='named') {{k}}
    //- '[ngModelGroup]'=`ctrl`
    //- '[ngModelGroup]'=`schema.name`
    form
      //- '[applies]'=`schema.properties['x-applies']`
      .fixed-props(
        *ngIf=`hasFixed`
      )
        b Fixed Properties
        .fixed-add(*ngIf=`nameSchemaFixedFiltered.enum.length`)
          //- #newFixed
          //- '[schema]'=`nameSchemaFixed`
          //- '(changes)'=`print($event)`
          input-field(
            '[named]'=`false`
            '[path]'=`path.concat('newFixed')`
            '[schema]'=`nameSchemaFixedFiltered`
            '[ctrl]'=`nameCtrlFixed`
            '(changes)'=`addProperty($event)`
          )
          //- '(click)'=`addProperty(newFixed.value); newFixed.value = '';`
          //- a.btn.waves-effect.waves-light.green.add-fixed(
          //-   '(click)'=`addProperty(nameCtrlFixed.value)`
          //- )
            i.material-icons add
        table.bordered.highlight
          //- thead
          //-   th Name
          //-   th Value
          //-   th
          tbody
            //- assign schema to variable to prevent duplicate lookup
            //- '[applies]'=`schemaFixed(item)['x-applies']`
            tr(
              *ngFor=`let item of indices.properties; let i = index`
              '[applies]'=`ctrl.fixedApplies(item)`
              '[dynamicAttrs]'=`schemaFixed(item)['x-bindings']?.attributes`
              '[extraVars]'=`{ path: path.concat(item) }`
              @flyInOut=`'in'`
            )
              //- td
              //-   input-field(
              //-     '[named]'=`false`
              //-     '[path]'=`path.concat(item).concat('name')`
              //-     '[schema]'=`nameSchemaFixed`
              //-     '[ctrl]'=`ctrl.controls.properties.controls[item].controls.name`
              //-   )
              td
                //- p item: {{item}}, i: {{i}}
                //- set schema's name: item
                input-value(
                  '[named]'=`true`
                  '[path]'=`path.concat(item)`
                  '[schema]'=`schemaFixed(item)`
                  '[ctrl]'=`ctrl.controls.properties.controls[item]`
                )
              td(
                *ngIf=`!schema?.required?.includes(item)`
              )
                button.btn.waves-effect.waves-light.btn-floating.red('(click)'=`removeProperty(item)`)
                  | ×

      //- actually check object length
      //- '[applies]'=`schema.patternProperties['x-applies']`
      .pattern-props(
        *ngIf=`hasPatts`
      )
        b Pattern Properties
        //- '[applies]'=`schema.patternProperties[patt]['x-applies']`
        .patt(
          *ngFor=`let patt of g._.keys(patts)`
          '[applies]'=`ctrl.patternApplies(patt)`
          @flyInOut=`'in'`
        )
          emp {{patt}}
          //- #newPatt
          //- input-field(
          //-   '[named]'=`false`
          //-   '[path]'=`path.concat(item).concat('name')`
          //-   '[schema]'=`nameSchemaPatt[patt]`
          //-   '[ctrl]'=`ctrl.controls.patternProperties.controls[patt].at(i).controls.name`
          //- )
          //- '(click)'=`addPatternProperty(patt, newPatt.value); newPatt.value = '';`
          a.btn.waves-effect.waves-light.green.add-patt(
            '(click)'=`addPatternProperty(patt);`
          )
            i.material-icons add
          table.bordered.highlight
            thead
              th Name
              th Value
              th
            tbody
              tr(
                *ngFor=`let item of indices.patternProperties[patt]; let i = index`
                @flyInOut=`'in'`
              )
                td
                  input-field(
                    '[named]'=`false`
                    '[path]'=`path.concat(item).concat('name')`
                    '[schema]'=`nameSchemaPatt[patt]`
                    '[ctrl]'=`ctrl.controls.patternProperties.controls[patt].at(i).controls.name`
                  )
                td
                  input-value(
                    '[named]'=`false`
                    '[path]'=`path.concat(item).concat('val')`
                    '[schema]'=`schemaPatt(patt,i)`
                    '[ctrl]'=`ctrl.controls.patternProperties.controls[patt].at(i).controls.val`
                  )
                td
                  button.btn.waves-effect.waves-light.btn-floating.red('(click)'=`removePatternProperty(patt, item)`)
                    | ×

      //- '[applies]'=`schema.additionalProperties['x-applies']`
      .additional-props(
        *ngIf=`hasAdd`
        '[applies]'=`ctrl.additionalApplies()`
      )
        b Additional Properties
        //- select.pug copy for oneOf
        .input-field(
          *ngIf=`isOneOf`
        )
          form
            select(
              '[(ngModel)]'=`option`
              name='option'
            )
              option(
                *ngFor=`let opt of schema.additionalProperties.oneOf; let idx = index`
                '[value]'=`idx`
              )
                | {{opt.type}}
        div(
          *ngIf=`!isOneOf || option`
        )
          table.bordered.highlight(
            *ngIf=`hasAdd`
          )
            thead
              th Name
              th Value
              th
            tbody
              //- ; trackBy: customTrackBy
              tr(
                *ngFor=`let item of indices.additionalProperties; let i = index`
                @flyInOut=`'in'`
              )
                td
                  input-field(
                    '[named]'=`false`
                    '[path]'=`path.concat(item).concat('name')`
                    '[schema]'=`nameSchemaAdd`
                    '[ctrl]'=`ctrl.controls.additionalProperties.at(i).controls.name`
                  )
                td
                  input-value(
                    '[named]'=`false`
                    '[path]'=`path.concat(item).concat('val')`
                    '[schema]'=`schemaAdd(i)`
                    '[ctrl]'=`ctrl.controls.additionalProperties.at(i).controls.val`
                  )
                td
                  button.btn.waves-effect.waves-light.btn-floating.red('(click)'=`removeAdditionalProperty(item)`)
                    | ×
                    //- '(click)'=`addAdditionalProperty(newAdd.value)`
          a.btn.waves-effect.waves-light.green.add-add(
            '(click)'=`addAdditionalProperty()`
          )
            i.material-icons add

    include ../errors.pug
