//- like input array of structured (ngFor) named input fields
.card
  .card-content('[id]'=`id`)
    p.card-title(*ngIf='named') {{k}}
    //- '[ngModelGroup]'=`ctrl`
    form
      ul(
        '[ngModelGroup]'=`schema.name`
      )
        //- presumes lengths of items and the FormArray will stay in sync
        li.row(
          *ngFor=`let item of items; let i = index`
          @flyInOut=`'in'`
        )
          button.btn.waves-effect.waves-light.btn-floating.red.col('(click)'=`remove(item)`)
            | Ã—
          //- based on ng-outputs/dl_table.pug
          //- ('#path_i = path.concat(item); ctrl_i = ctrl.at(i);')
          table.bordered.highlight.col
            tbody
              //- id=`{{?.id}}`
              tr(
                *ngFor=`let key of keys`
                @flyInOut=`'in'`
              )
                //- schema.items.properties[key].name
                th {{key}}
                td
                  //- '[name]'=`i`
                  //- '[schema]'=`schema.items.properties[key]`
                  input-field(
                    '[named]'=`false`
                    '[path]'=`path.concat(item).concat(key)`
                    '[schema]'=`getSchema(i, key)`
                    '[ctrl]'=`ctrl.at(i).controls[key]`
                  )

    a.btn.waves-effect.waves-light.green('(click)'=`add()`)
      i.material-icons add
