.card
  .card-content('[id]'=`id`)
    p.card-title(*ngIf='named') {{k}}
    //- '[ngModelGroup]'=`ctrl`
    form

      //- select.pug
      .input-field(
        *ngIf=`isOneOf`
      )
        //- '(input)'=`option = $event.target.value`
        select(
          '[(ngModel)]'=`option`
          '[ngModelOptions]'=`{ standalone: true }`
        )
          option(
            *ngFor=`let opt of inAdditional ? schema.additionalItems.oneOf : schema.items.oneOf; let idx = index`
            '[value]'=`idx`
            @flyInOut=`'in'`
          )
            | {{opt.type}}
      //- script.
      //-   $('select').material_select();

      ul(
        *ngIf=`!isOneOf || option`
        '[ngModelGroup]'=`schema.name`
      )
        //- presumes lengths of ctrl.indices and the FormArray will stay in sync
        li.row(
          *ngFor=`let item of ctrl.indices; let i = index`
          @flyInOut=`'in'`
        )
          button.btn.waves-effect.waves-light.btn-floating.red.col('(click)'=`ctrl.remove(item, i)`)
            | Ã—
          //- '[name]'=`i`
          //- '[schema]'=`schema.items`
          input-field.col(
            '[named]'=`false`
            '[schema]'=`resolveSchema(i)`
            '[ctrl]'=`ctrl.at(i)`
          )

    //- '[disabled]'=`ctrl.isFull`
    a.btn.waves-effect.waves-light.green(
      '(click)'=`ctrl.add()`
      '[ngClass]'=`{ 'disabled': ctrl.isFull }`
    )
      i.material-icons add

    include ../errors.pug
