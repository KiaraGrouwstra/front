//- {k, id, named, cols: [{k, id}], rows: [{id, cells: [{id, val}]}]}
//- include ./svg-icons.pug
.card
  .card-content
    p.card-title(*ngIf='named') {{k}}
    a.btn.waves-effect.waves-light.clear-btn.yellow(
      '[ngClass]'=`{ 'disabled': !g._.size(sortColsDesc) }`
      '(click)'=`clearSorts()`
    )
      | clear sort
    a.btn.waves-effect.waves-light.clear-btn.blue(
      '[ngClass]'=`{ 'disabled': colOrder.length==col_keys.length }`
      '(click)'=`clearHides()`
    )
      | clear hide
    a.btn.waves-effect.waves-light.clear-btn.orange(
      '[ngClass]'=`{ 'disabled': !g._.size(condFormat) }`
      '(click)'=`clearFormats()`
    )
      | clear formatting
    a.btn.waves-effect.waves-light.clear-btn.teal(
      '[ngClass]'=`{ 'disabled': !g._.size(filters) }`
      '(click)'=`clearFilters()`
    )
      | clear filters

    table.bordered.highlight(id=`{{id}}`)
      thead
        //- https://github.com/angular/angular/issues/2451
        //- *ngFor=`let col of cols`
        //- ; #col = cols[name]
        //- '[assignLocal]'=`#col to cols[name]`
        //- '[assignLocal]'=`#isDesc to sortColsDesc[name]`
        //- '[assignLocal]'=`{ col: cols[name] }`
        th.tbl-hdr.waves-effect(
          '*ngFor'=`let name of colOrder; let idx = index`
          @flyInOut=`'in'`
          '[assignLocal]'=`{ col: cols[name] }`
          id=`{{cols[name].id}}`
          '[class.sort]'=`g._.keys(sortColsDesc).includes(name)`
          '[class.asc]'=`sortColsDesc[name] == false`
          '[class.desc]'=`sortColsDesc[name]`
          '[ngClass]'=`{ 'waves-red': idx % 6 == 0, 'waves-orange': idx % 6 == 1, 'waves-yellow': idx % 6 == 2, 'waves-green': idx % 6 == 3, 'waves-teal': idx % 6 == 4, 'waves-purple': idx % 6 == 5 }`
          '(click)'=`sortClick(name)`
        )
          //- | col: [{{col}}]
          | {{cols[name].k}}
          //- svg.icon.current(width='24', height='24')
          //-   use(xlink:href='#arrow')
          //- svg.icon.desired(width='24', height='24')
          //-   use(xlink:href='#arrow')

          button.btn-floating.waves-effect.waves-light.btn-margin.tooltipped.yellow(
            'data-tooltip'='sort'
          )
            ng-container('[ngSwitch]'=`sortColsDesc[name]`)
              template('[ngSwitchCase]'=`true`)
                | ▼
              template('[ngSwitchCase]'=`false`)
                | ▲
              template(ngSwitchDefault)
                i.material-icons import_export
                //- sort_by_alpha

          a.btn-floating.waves-effect.waves-light.btn-margin.tooltipped.blue(
            'data-tooltip'='hide'
            '(click)'=`$event.stopPropagation(); hideCol(name)`
          )
            i.material-icons visibility_off
          a.btn-floating.waves-effect.waves-light.btn-margin.tooltipped.orange(
            'data-tooltip'='conditional formatting'
            '[hidden]'=`!colMeta[name].hasNum || condFormat[name]`
            '(click)'=`$event.stopPropagation(); setFormat(name, [{ r: 255, g: 220, b: 220 }, null, { r: 220, g: 255, b: 220 }])`
          )
            i.material-icons mode_edit
          button.btn-floating.waves-effect.waves-light.btn-margin.tooltipped.orange(
            'data-tooltip'='clear formatting'
            '[hidden]'=`!colMeta[name].hasNum || !condFormat[name]`
            '(click)'=`$event.stopPropagation(); clearFormat(name)`
          )
            | ×
          a.btn-floating.waves-effect.waves-light.btn-margin.tooltipped.teal(
            'data-tooltip'='filter'
            '[hidden]'=`!colMeta[name].hasNum || filters[name]`
            '(click)'=`$event.stopPropagation(); openNumFilterModal(name)`
          )
            i.material-icons search
          button.btn-floating.waves-effect.waves-light.btn-margin.tooltipped.teal(
            'data-tooltip'='clear filter'
            '[hidden]'=`!colMeta[name].hasNum || !filters[name]`
            '(click)'=`$event.stopPropagation(); clearFilter(name)`
          )
            | ×
      tbody
        tr
          th(
            *ngFor=`let name of colOrder`
            @flyInOut=`'in'`
          )
            form
              //- .numFilter
              //-   .range-field
              //-     input(
              //-       type='range'
              //-       '[min]'=`colMeta[name].min`
              //-       '[max]'=`colMeta[name].max`
              //-       '(input)'=`setFilter(name, $event.target.value)`
              //-     )
              //-   button.btn.waves-effect.waves-light.btn-floating.red.col(
              //-     '[hidden]'=`!filters[name]`
              //-     '(click)'=`clearFilter(name)`
              //-   )
              //-     | ×
              .textFilter('[hidden]'=`!colMeta[name].hasText`)
                .input-field
                  i.material-icons.prefix(
                    '[hidden]'=`filters[name]`
                  )
                    | search
                  //- '(click)'=`setFilter(name, '')`
                  button.waves-effect.waves-light.btn-floating.red.col.prefix(
                    '[hidden]'=`!filters[name]`
                    '(click)'=`clearFilter(name)`
                  )
                    | ×
                  //- #tmp=`ngForm`
                  //- '[(ngModel)]'=`_filters[name]`
                  //- id=`{{cols[name].id}}-input`
                  //- warning: duplicate name
                  input(
                    '[ngModel]'=`filters[name]`
                    '(input)'=`setFilter(name, $event.target.value)`
                  )
                  //- //-  || tmp.touched
                  //- label(
                  //-   'attr.for'=`{{cols[name].id}}-input`
                  //-   '[ngClass]'=`{ 'active': filters[name] }`
                  //- )
                  //-   | {{cols[name].k}}
                  //-   //- | {{cols[name].k}}: {{_filters[name] | json}}

        //- *ngFor=`let r of rows`
        tr(
          *ngFor=`let r of data`
          id=`{{r.id}}`
          @flyInOut=`'in'`
        )
          //- *ngFor=`let c of r.cells`
          //- ; #c = r.cells[name]
          td(
            *ngFor=`let name of colOrder; let idx = index`
            id=`{{r.cells[name].id}}`
            '[ngClass]'=`{ 'num-col': cellIsNum(name, r.cells[name].val) }`
            '[ngStyle]'=`{ 'background-color': valColor(name, r.cells[name].val) }`
            @flyInOut=`'in'`
          )
            //- '[schema]'=`cellSchema(idx)`
            value(
              '[path]'=`r.cells[name].path`
              '[val]'=`r.cells[name].val`
              '[schema]'=`colMeta[name].schema`
            )
          //- td(
          //-   *ngFor=`let name of colOrder; #c = r.cells.get(name)`
          //-   id=`{{r.cells[name].id}}`
          //- )
          //-   value(
          //-     '[path]'=`c.path`
          //-     '[val]'=`c.val`
          //-     '[schema]'=`c.schema`
          //-   )

.modal#modal
  .modal-content
    h4 Filter range
    #slider
  .modal-footer
    a.modal-action.modal-close.waves-effect.waves-green.btn-flat(
      '(click)'=`setNumFilter()`
    )
      | OK
